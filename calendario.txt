Preciso quando clicar no botão "Exibir Disponibilidade" abrir componente CalendarioDisponibilidadesPage.js como modal, abrir igual como CalendarioAgendamentoForm.js quando clica "Agendar". Segue os códigos compartilhados para orientação e alteração nos códigos. Não esquece de passar state: { disponibilidades, agendamento, profissionais, servicos antes de exibir CalendarioDisponibilidadesPage.js.

CalendarioAgendamento.js:
import React, { useState, useEffect } from 'react';
import FullCalendar from '@fullcalendar/react';
import dayGridPlugin from '@fullcalendar/daygrid';
import timeGridPlugin from '@fullcalendar/timegrid';
import interactionPlugin from '@fullcalendar/interaction';
import ptBrLocale from '@fullcalendar/core/locales/pt-br';
import axios from 'axios';
import './CalendarioAgendamento.css';
import { useNavigate } from 'react-router-dom';
import CalendarioAgendamentoForm from './CalendarioAgendamentoForm'; // Importe o componente

const CalendarioAgendamento = () => {
  const [eventos, setEventos] = useState([]);
  const [profissionais, setProfissionais] = useState([]);
  const [profissionalSelecionado, setProfissionalSelecionado] = useState('');
  const [servicos, setServicos] = useState([]);
  const [clientes, setClientes] = useState([]);
  const [diasExibicao, setDiasExibicao] = useState(7);
  const [currentTimeEvent, setCurrentTimeEvent] = useState(null);
  const [horaInicial, setHoraInicial] = useState('08:00:00');
  const [horaFinal, setHoraFinal] = useState('19:00:00');
  const [showAgendamentoForm, setShowAgendamentoForm] = useState(false); // Estado para exibir o formulário
  const navigate = useNavigate();
  const [loading, setLoading] = useState(false);

  const API_BASE_URL = process.env.REACT_APP_API_URL;

  useEffect(() => {
    const token = localStorage.getItem('token');
    if (token) {
      axios.get(`${API_BASE_URL}/clientes`, { headers: { Authorization: `Bearer ${token}` } })
        .then(response => setClientes(response.data))
        .catch(error => console.error('Erro ao carregar clientes:', error));

      axios.get(`${API_BASE_URL}/servicos`, { headers: { Authorization: `Bearer ${token}` } })
        .then(response => setServicos(response.data))
        .catch(error => console.error('Erro ao carregar serviços:', error));

      axios.get(`${API_BASE_URL}/profissionais`, { headers: { Authorization: `Bearer ${token}` } })
        .then(response => setProfissionais(response.data))
        .catch(error => console.error('Erro ao carregar profissionais:', error));
    }
  }, [API_BASE_URL]);

  useEffect(() => {
    if (clientes.length > 0 && servicos.length > 0 && profissionais.length > 0) {
      carregarEventos();
    }
  }, [clientes, servicos, profissionais]);

  useEffect(() => {
    const atualizarLinhaTempo = () => {
      const now = new Date();
      setCurrentTimeEvent({
        id: 'current-time',
        title: '',
        start: now,
        end: now,
        display: 'background',
        backgroundColor: 'red',
        borderColor: 'red'
      });
    };

    atualizarLinhaTempo();
    const intervalId = setInterval(atualizarLinhaTempo, 60000);

    return () => clearInterval(intervalId);
  }, []);

  const carregarEventos = async () => {
    try {
      const token = localStorage.getItem('token');
      const response = await axios.get(`${API_BASE_URL}/agendamentos`, {
        headers: { Authorization: `Bearer ${token}` }
      });
      const eventosFormatados = formatarEventos(response.data);
      setEventos(eventosFormatados);
    } catch (error) {
      console.error('Erro ao carregar agendamentos:', error);
    }
  };

  const carregarEventosPorProfissional = async (profissionalId) => {
    try {
      const token = localStorage.getItem('token');
      const response = await axios.get(`${API_BASE_URL}/agendamentos/profissional/${profissionalId}`, {
        headers: { Authorization: `Bearer ${token}` }
      });
      const eventosFormatados = formatarEventos(response.data);
      setEventos(eventosFormatados);
    } catch (error) {
      console.error('Erro ao carregar agendamentos do profissional:', error);
    }
  };

  const formatarEventos = (agendamentos) => {
    if (clientes.length === 0 || servicos.length === 0 || profissionais.length === 0) {
      return [];
    }

    return agendamentos.map(agendamento => {
      const cliente = clientes.find(c => c.id === agendamento.cliente_id);
      const servico = servicos.find(s => s.id === agendamento.servico_id);
      const profissional = profissionais.find(p => p.id === agendamento.profissional_id);
      const duracaoServico = servico ? servico.duracao : 60;

      const dataInicio = new Date(agendamento.data_horario_agendamento);
      const dataFim = new Date(dataInicio.getTime() + duracaoServico * 60000);

      return {
        id: agendamento.id,
        title: `${cliente ? cliente.nome : 'Cliente'} - ${servico ? servico.nome : 'Serviço'}`,
        start: dataInicio,
        end: dataFim,
        color: profissional ? profissional.cor : obterCorProfissional(agendamento.profissional_id)
      };
    });
  };

  const obterCorProfissional = (profissionalId) => {
    const cores = ['#FF5733', '#33FF57', '#3357FF', '#FF33F1', '#33FFF1'];
    return cores[profissionalId % cores.length];
  };

  const handleEventClick = (clickInfo) => {
    alert(`Detalhes do agendamento: ${clickInfo.event.title}`);
  };

  const handleDateSelect = (selectInfo) => {
    const title = prompt('Digite o nome do cliente e o serviço:');
    if (title) {
      const novoEvento = {
        title,
        start: selectInfo.startStr,
        end: selectInfo.endStr,
        allDay: selectInfo.allDay
      };
      setEventos([...eventos, novoEvento]);
    }
    selectInfo.view.calendar.unselect();
  };

  const handleEventDrop = (dropInfo) => {
    console.log('Evento movido:', dropInfo.event);
  };

  const filtrarPorProfissional = (profissionalId) => {
    setProfissionalSelecionado(profissionalId);
    if (profissionalId) {
      carregarEventosPorProfissional(profissionalId);
    } else {
      carregarEventos();
    }
  };

  const handleCancel = () => {
    navigate('/dashboard');
  };

  return (
    <div className="calendario-container">
      <div className="lista-profissionais">
        <button className="sair-button" type="button" onClick={handleCancel} disabled={loading}>Sair</button>
        <button
          className="agendar-button"
          onClick={() => setShowAgendamentoForm(true)}
        >
          Agendar
        </button>
        {showAgendamentoForm && (
          <div className="agendamento-modal">
            <CalendarioAgendamentoForm />
            <button onClick={() => setShowAgendamentoForm(false)}>Fechar</button>
          </div>
        )}
        <div className="filtro-horario">
          <label>
            Horário Inicial:
            <input
              type="time"
              value={horaInicial}
              onChange={(e) => setHoraInicial(e.target.value)}
            />
          </label>
          <label>
            Horário Final:
            <input
              type="time"
              value={horaFinal}
              onChange={(e) => setHoraFinal(e.target.value)}
            />
          </label>
        </div>
        <div
          className="profissional-item"
          style={{ backgroundColor: '#000' }}
          onClick={() => filtrarPorProfissional('')}
        >
          Todos os Profissionais
        </div>
        {profissionais.map(prof => (
          <div
            key={prof.id}
            className="profissional-item"
            style={{ backgroundColor: prof.cor }}
            onClick={() => filtrarPorProfissional(prof.id)}
          >
            {prof.nome}
          </div>
        ))}
      </div>
      
      <div className="calendar-wrapper">        
        <FullCalendar
          plugins={[dayGridPlugin, timeGridPlugin, interactionPlugin]}
          initialView="timeGridWeek"
          headerToolbar={{
            left: 'prev,next today',
            center: 'title',
            right: 'dayGridMonth,timeGridWeek,timeGridDay'
          }}
          locale={ptBrLocale}
          events={[...eventos, currentTimeEvent].filter(event => event !== null)}
          selectable={true}
          selectMirror={true}
          dayMaxEvents={true}
          weekends={true}
          select={handleDateSelect}
          eventClick={handleEventClick}
          eventDrop={handleEventDrop}
          height="auto"
          contentHeight="auto"
          stickyHeaderDates={true}
          slotMinTime={horaInicial}
          slotMaxTime={horaFinal}
          nowIndicator={true}
        />
      </div>
    </div>
  );
};

export default CalendarioAgendamento;

CalendarioAgendamentoForm.js:
import React, { useState, useEffect } from 'react';
import axios from 'axios';
import './CalendarioAgendamentoForm.css';
import { useNavigate } from 'react-router-dom';

const AgendamentoForm = () => {
  const [clientes, setClientes] = useState([]);
  const [servicos, setServicos] = useState([]);
  const [profissionais, setProfissionais] = useState([]);
  const [disponibilidades, setDisponibilidades] = useState([]);
  const navigate = useNavigate();
  const [agendamento, setAgendamento] = useState({
    empresa_id: '', // Será preenchido automaticamente
    cliente_id: '',
    servico_id: '',
    profissional_id: '',
    data_horario_agendamento: ''
  });
  const [message, setMessage] = useState('');
  const [messageType, setMessageType] = useState('');
  const [diasExibicao, setDiasExibicao] = useState(7);

  const API_BASE_URL = process.env.REACT_APP_API_URL;

  const handleExibirDisponibilidade = () => {
    navigate('/calendarioDisponibilidadesPage', { 
      state: { 
        disponibilidades, 
        agendamento, 
        profissionais, 
        servicos 
      } 
    });
  };

  useEffect(() => {
    const token = localStorage.getItem('token');
    if (token) {
      // Carregar clientes, serviços e profissionais
      axios.get(`${API_BASE_URL}/clientes`, { headers: { Authorization: `Bearer ${token}` } })
        .then(response => setClientes(response.data))
        .catch(error => console.error('Erro ao carregar clientes:', error));

      axios.get(`${API_BASE_URL}/servicos`, { headers: { Authorization: `Bearer ${token}` } })
        .then(response => setServicos(response.data))
        .catch(error => console.error('Erro ao carregar serviços:', error));

      axios.get(`${API_BASE_URL}/profissionais`, { headers: { Authorization: `Bearer ${token}` } })
        .then(response => setProfissionais(response.data))
        .catch(error => console.error('Erro ao carregar profissionais:', error));
    }
  }, [API_BASE_URL]);

  const handleChange = (e) => {
    const { name, value } = e.target;
    setAgendamento({ ...agendamento, [name]: value });
  
    if (name === 'servico_id') {
      carregarProfissionaisPorServico(value);
    }
  
    if (name === 'profissional_id') {
      carregarDisponibilidades(value);
    }
  
    // Validar campos obrigatórios
    if (!agendamento.cliente_id || !agendamento.servico_id || !agendamento.profissional_id || !agendamento.data_horario_agendamento) {
      setMessage('Todos os campos são obrigatórios');
      setMessageType('error');
    } else {
      setMessage('');
      setMessageType('');
    }
  }; 

  const carregarProfissionaisPorServico = (servicoId) => {
    const token = localStorage.getItem('token');
    axios.get(`${API_BASE_URL}/profissionais-por-servico/${servicoId}`, { headers: { Authorization: `Bearer ${token}` } })
      .then(response => setProfissionais(response.data))
      .catch(error => console.error('Erro ao carregar profissionais por serviço:', error));
  };

  const carregarDisponibilidades = (profissionalId) => {
    const token = localStorage.getItem('token');
    const servicoDuracao = servicos.find(s => s.id === parseInt(agendamento.servico_id))?.duracao;
  
    axios.get(`${API_BASE_URL}/disponibilidades/profissional/${profissionalId}`, {
      headers: { Authorization: `Bearer ${token}` }
    })
      .then(response => {
        console.log('Dados recebidos:', response.data);
        const disponibilidadesFormatadas = formatarDisponibilidades(response.data, diasExibicao, servicoDuracao);
        console.log('Disponibilidades formatadas:', disponibilidadesFormatadas);
  
        // Filtrar disponibilidades baseado em agendamentos existentes
        axios.get(`${API_BASE_URL}/agendamentos/profissional/${profissionalId}`, {
          headers: { Authorization: `Bearer ${token}` }
        })
          .then(agendamentoResponse => {
            console.log('Retorno do backend1: ', agendamentoResponse.data);
            const agendamentosExistentes = agendamentoResponse.data;
            const disponibilidadesFiltradas = filtrarHorarios(disponibilidadesFormatadas, agendamentosExistentes);
            setDisponibilidades(disponibilidadesFiltradas);
          })
          .catch(error => {
            console.error('Erro ao carregar agendamentos:', error);
            setDisponibilidades([]);
            setMessage('Erro ao carregar agendamentos. Por favor, tente novamente.');
            setMessageType('error');
          });
      })
      .catch(error => {
        console.error('Erro ao carregar disponibilidades:', error);
        setDisponibilidades([]);
        setMessage('Erro ao carregar disponibilidades. Por favor, tente novamente.');
        setMessageType('error');
      });
  };
  
  const filtrarHorarios = (disponibilidades, agendamentos) => {
    return disponibilidades.map(dia => {
      const horariosFiltrados = dia.horarios.map(horario => {
        const horarioInicio = new Date(`${dia.data}T${horario.inicio}`);
        const horarioFim = new Date(`${dia.data}T${horario.fim}`);
  
        const agendamentoConflito = agendamentos.find(ag => {
          const agendamentoInicio = new Date(ag.data_horario_agendamento);
          const agendamentoFim = new Date(ag.data_horario_agendamento);
          agendamentoFim.setMinutes(agendamentoFim.getMinutes() + ag.servico_duracao);
  
          return (
            (agendamentoInicio < horarioFim) && 
            (agendamentoFim > horarioInicio)
          );
        });
  
        return {
          ...horario,
          ocupado: Boolean(agendamentoConflito),
          cliente_nome: agendamentoConflito ? agendamentoConflito.cliente_nome : null,
          servico_nome: agendamentoConflito ? agendamentoConflito.servico_nome : null
        };
      });
  
      return {
        ...dia,
        horarios: horariosFiltrados
      };
    });
  };
  
  
  const formatarDisponibilidades = (disponibilidades, dias, servicoDuracao) => {
    if (!disponibilidades || disponibilidades.length === 0) {
      return [];
    }
  
    const hoje = new Date();
    const disponibilidadesFormatadas = [];
    const diasSemana = ['Domingo', 'Segunda-feira', 'Terça-feira', 'Quarta-feira', 'Quinta-feira', 'Sexta-feira', 'Sábado'];
  
    for (let i = 0; i < dias; i++) {
      const data = new Date(hoje);
      data.setDate(hoje.getDate() + i);
      const diaSemana = diasSemana[data.getDay()];
  
      const disponibilidadesDoDia = disponibilidades.filter(d => d.dia_semana === diaSemana);
  
      if (disponibilidadesDoDia.length > 0) {
        const horariosDistribuidos = distribuirHorarios(disponibilidadesDoDia[0], servicoDuracao);
        
        disponibilidadesFormatadas.push({
          data: data.toISOString().split('T')[0],
          diaSemana: diaSemana,
          horarios: horariosDistribuidos
        });
      }
    }
  
    return disponibilidadesFormatadas;
  };
  
  const distribuirHorarios = (disponibilidade, servicoDuracao) => {
    const horarios = [];
    const inicio = new Date(`2000-01-01T${disponibilidade.hora_inicio}`);
    const fim = new Date(`2000-01-01T${disponibilidade.hora_fim}`);
  
    while (inicio < fim) {
      const horarioFim = new Date(inicio.getTime() + servicoDuracao * 60000);
      if (horarioFim <= fim) {
        horarios.push({
          inicio: inicio.toTimeString().slice(0, 5),
          fim: horarioFim.toTimeString().slice(0, 5)
        });
      }
      inicio.setTime(inicio.getTime() + servicoDuracao * 60000);
    }
  
    return horarios;
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
      const token = localStorage.getItem('token');
      await axios.post(`${API_BASE_URL}/agendamentos`, agendamento, {
        headers: { Authorization: `Bearer ${token}` }
      });
      setMessage('Agendamento realizado com sucesso!');
      setMessageType('success');
    } catch (err) {
      if (err.response && err.response.status === 400) {
        setMessage(err.response.data.message || 'Dados inválidos ou conflito de horário.');
        setMessageType('error');  
      } else {
        setMessage('Erro ao realizar agendamento. Por favor, tente novamente.');
        setMessageType('error');
      }
    } finally {
    }
  };

  return (
    <div className="agendamento-container">    
      {message && <div className={`floating-message ${messageType}`}>{message}</div>}
      <form onSubmit={handleSubmit} className="agendamento-form">        
        <div className="agendamento-form-header">          
          <label>Cliente</label>        
          <select name="cliente_id" value={agendamento.cliente_id} onChange={handleChange} required>
            <option value="">Selecione um cliente</option>
            {clientes.map(cliente => (
            <option key={cliente.id} value={cliente.id}>{cliente.nome}</option>
            ))}
          </select>

          <label>Serviço</label>
          <select name="servico_id" value={agendamento.servico_id} onChange={handleChange} required>
            <option value="">Selecione um serviço</option>
            {servicos.map(servico => (
              <option key={servico.id} value={servico.id}>{servico.nome}</option>
            ))}
          </select>

          <label>Dias de exibição</label>
          <select value={diasExibicao} onChange={(e) => setDiasExibicao(Number(e.target.value))}>
            <option value={7}>7 dias</option>
            <option value={14}>14 dias</option>
            <option value={21}>21 dias</option>
            <option value={30}>30 dias</option>
          </select>

          <label>Profissional</label>
          <select 
            name="profissional_id" 
            value={agendamento.profissional_id} 
            onChange={handleChange} 
            required
            disabled={!agendamento.servico_id}
          >
          <option value="">Selecione um profissional</option>
             {profissionais.map(profissional => (
             <option key={profissional.id} value={profissional.id}>{profissional.nome}</option>
             ))}
          </select>
          
          <div className="button-container">
            <button 
              type="button" 
              onClick={handleExibirDisponibilidade} 
              className="exibir-disponibilidade-button"
              disabled={!agendamento.profissional_id}
            >
              Exibir Disponibilidade
            </button>
          </div>

        </div>
  
      </form>
    </div>
  );
};

export default AgendamentoForm;

CalendarioDisponibilidadesPage.js:
import React, { useState, useContext } from 'react';
import { useNavigate, useLocation } from 'react-router-dom';
import './CalendarioDisponibilidadesPage.css';
import axios from 'axios'; 
import { AuthContext } from '../AuthContext';

const DisponibilidadePage = () => {
  const navigate = useNavigate();
  const location = useLocation();
  const { disponibilidades, agendamento, profissionais, servicos } = location.state;
  const [message, setMessage] = useState('');
  const [messageType, setMessageType] = useState('');

  const { empresa } = useContext(AuthContext);

  const handleVoltar = () => {
    navigate(-1);
  };

  const API_BASE_URL = process.env.REACT_APP_API_URL;

  const handleSelecionarHorario = async (data, horario) => {
    console.log(`Horário selecionado: ${data} ${horario.inicio} - ${horario.fim}`);
    // Criando o objeto agendamento com os dados necessários
    const novoAgendamento = {
      empresa_id: `${empresa.id}`,
      cliente_id: agendamento.cliente_id,
      profissional_id: agendamento.profissional_id,
      servico_id: agendamento.servico_id,
      data_horario_agendamento: `${data} ${horario.inicio}`,
      status: 'agendado'
    };

    console.log('Antes do erro: ', novoAgendamento);

    try {
      const token = localStorage.getItem('token');
      console.log('Dentro do try: ', novoAgendamento);
      const response = await axios.post(`${API_BASE_URL}/agendamentos`, novoAgendamento, {
        headers: {
          Authorization: `Bearer ${token}`
        }
      });
      console.log(response.data);
      setMessage('Agendamento realizado com sucesso!');
      setMessageType('success');
    } catch (error) {
      if (error.response && error.response.status === 400) {
        setMessage(error.response.data.message || 'Dados inválidos ou conflito de horário.');
        setMessageType('error');
      } else {
        console.error('Erro ao realizar agendamento:', error);
        setMessage('Erro ao realizar agendamento.');
        setMessageType('error');
      }
    }

  };

  return (
    <div className="disponibilidade-container">
      <h2>Disponibilidades</h2>
      {message && <div className={`floating-message ${messageType}`}>{message}</div>}
      <div className="disponibilidades-grid">
        {disponibilidades.map((disp, index) => (
          <div key={index} className="disponibilidade-item">
            <p>{disp.data} ({disp.diaSemana})</p>
            <p>{agendamento.profissional_id && profissionais.find(p => p.id === parseInt(agendamento.profissional_id))?.nome}</p>
            <p>{agendamento.servico_id && servicos.find(s => s.id === parseInt(agendamento.servico_id))?.nome}</p>
            <p>Duração: {agendamento.servico_id && servicos.find(s => s.id === parseInt(agendamento.servico_id))?.duracao} Minutos</p>
            {disp.horarios.map((horario, idx) => (
              <button 
                  key={idx} 
                  onClick={() => !horario.ocupado && handleSelecionarHorario(disp.data, horario)}
                  disabled={horario.ocupado}
                  className={horario.ocupado ? 'ocupado' : ''}
                  title={horario.ocupado ? `Ocupado pelo cliente: ${horario.cliente_nome} - Serviço: ${horario.servico_nome}` : ''}
                >
                  {`${horario.inicio} - ${horario.fim}`}
                </button>
              ))}
          </div>
        ))}
      </div>
      <button onClick={handleVoltar} className="voltar-button">Voltar</button>
    </div>
  );
};

export default DisponibilidadePage;

CalendarioAgendamentoForm.css:
/* AgendamentoForm.css */

/* Estilizando o container principal */
.agendamento-container {
  font-family: Arial, sans-serif;
  background-color: #F5F5F5;
  color: #333;
  padding: 10px;
  min-height: 50vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  transition: margin-left 0.3s ease;
}

/* Estilizando o formulário */
.agendamento-form {
  background-color: #FFFFFF;
  border-radius: 8px;
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
  padding: 5px;
  max-width: 300px;
  width: 100%;
  margin: 5px 0;
  box-sizing: border-box;
  display: flex;
  flex-direction: column;
}

/* Label e select */
.agendamento-form-header label {
  font-weight: bold;
  margin-right: 10px;
}

.agendamento-form-header select {
  padding: 5px 10px;
  border-radius: 4px;
  border: 1px solid #ccc;
  min-width: 180px;
}

.agendamento-form select {
  width: 100%;
  padding: 10px;
  margin: 10px 0;
  border: 1px solid #D3D3D3;
  border-radius: 4px;
  box-sizing: border-box;
  transition: border-color 0.3s, box-shadow 0.3s;
}

/* Estilizando o grid de disponibilidades */
.disponibilidades-grid {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
  gap: 20px;
  margin-top: 20px;
  max-height: 400px;
  overflow-y: auto;
  padding: 15px 0;
}

/* Estilizando os itens de disponibilidade */
.disponibilidade-item {
  background-color: #e0f7fa;
  padding: 10px;
  border-radius: 8px;
  box-shadow: 0 0 5px rgba(0, 0, 0, 0.1);
}

.disponibilidade-item p {
  margin: 5px 0;
}

.disponibilidade-item button {
  display: block;
  width: 100%;
  padding: 8px;
  margin-top: 10px;
  background-color: #00796b;
  color: white;
  border: none;
  border-radius: 4px;
  cursor: pointer;
}

.disponibilidade-item button:hover {
  background-color: #004d40;
}

/* Container para botões */
.button-container {
  display: flex;
  flex-direction: column;
  gap: 10px;
  margin-top: 20px;
}

/* Botões */
.agendamento-container .exibir-disponibilidade-button,
.agendamento-container .sair-button {
  background-color: #7965a6;
  color: white;
  padding: 12px;
  border: none;
  border-radius: 6px;
  cursor: pointer;
  font-size: 16px;
  margin-top: 15px;
  width: 100%;
  transition: background-color 0.3s, transform 0.3s;
}

.agendamento-container .exibir-disponibilidade-button:hover,
.agendamento-container .sair-button:hover {
  background-color: #512da8;
  transform: scale(1.05);
}

/* Estilizando os botões de agendamento e sair */
.agendar-button {
  padding: 10px 20px;
  margin-top: 20px;
  margin-right: 10px;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  font-size: 16px;
}

/* Mensagem de sucesso ou erro */
.floating-message {
  position: fixed;
  top: 20px;
  right: 20px;
  padding: 10px;
  border-radius: 4px;
  color: white;
  z-index: 200;
  transition: opacity 0.3s ease;
}

.floating-message.success {
  background-color: #4caf50;
}

.floating-message.error {
  background-color: #f44336;
}

/* Adicione estes estilos ao final do seu arquivo AgendamentoForm.css */

.exibir-disponibilidade-button {
  width: 100%;
  padding: 10px 20px;
  background-color: #4caf50;
  color: white;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  font-size: 16px;
  margin-top: 10px; /* Adiciona um espaço acima do botão */
  box-sizing: border-box; /* Garante que o padding não aumente a largura total */
}

.exibir-disponibilidade-button:hover {
  background-color: #45a049;
}

.disponibilidade-container {
  margin-top: 20px;
}

.voltar-button {
  padding: 10px 20px;
  margin-top: 20px;
  background-color: #2196F3;
  color: white;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  font-size: 16px;
}

.voltar-button:hover {
  background-color: #0b7dda;
}

@media (max-width: 480px) {
  .form-layout.sidebar-closed {
    padding-left: 40px; /* ajuste a largura da barra lateral */
  }
  
  .form-layout.sidebar-closed .sidebar {
    width: 30px; /* ajuste a largura da barra lateral */
    overflow: hidden;  
    background-color: transparent;
  }
  
  .form-layout.sidebar-closed .sidebar .toggle-button {
    position: absolute;
    left: 0;
    top: 0;
    z-index: 1;
  }
  
  .form-layout.sidebar-closed .sidebar .sidebar-nav {
    display: none;
  }

}

CalendarioDisponibilidadesPage.css:
.disponibilidades-grid {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
  gap: 20px;
}

.disponibilidade-item {
  background-color: #f4f4f4;
  padding: 10px;
  border-radius: 5px;
}

.ocupado {
  background-color: #ffcccc;
  /* Cor de fundo para indicar ocupação */
  cursor: not-allowed;
  /* Cursor de não permitido */
}

/* Mensagem de sucesso ou erro */
.disponibilidade-container .floating-message {
  position: fixed;
  top: 20px;
  right: 20px;
  padding: 10px;
  border-radius: 4px;
  color: white;
  z-index: 200;
  transition: opacity 0.3s ease;
}

.disponibilidade-container .floating-message.success {
  background-color: #4caf50;
}

.disponibilidade-container .floating-message.error {
  background-color: #f44336;
}

.disponibilidade-item button.ocupado {
  background-color: #f44336;
  /* Cor de alerta, pode ajustar conforme necessidade */
  color: white;
  cursor: not-allowed;
}

.disponibilidade-item button.ocupado:hover {
  background-color: #d32f2f;
  /* Cor de alerta mais escura ao passar o mouse */
}

@media (max-width: 480px) {

}