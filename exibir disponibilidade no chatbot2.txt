Para exibir horário disponível, precisa fazer filtro conforme carregarDisponibilidades do código AgendamentoForm.js, porém para bot, não quero enviar ao cliente os horários que estejam ocupado na tabela agendamentos. 
Analisar a lógica do código AgendamentoForm.js para adaptar no código bot.js. 
Caso necessite criar novo API, adicionar no código, dois caminhos, caminho do atual API como web e criar mais um API com caminho bot, para melhor controle dos API para WEB e para Bot.

bot.js:
require('dotenv').config();
const { Client } = require('whatsapp-web.js');
const qrcode = require('qrcode-terminal');
const axios = require('axios');
const whatsappService = require('./whatsappService');

const client = new Client();

const conversationState = {};

client.on('qr', (qr) => {
    qrcode.generate(qr, { small: true });
});

client.on('ready', () => {
    console.log('Client is ready!');
});

client.on('message', async (message) => {
    const empresaId = await whatsappService.getEmpresaByWhatsapp(message.to);
    if (!empresaId) {
        await message.reply('Desculpe, não foi possível identificar sua empresa.');
        return;
    }

    const userId = message.from;

    if (message.body === '!servicos') {
        const servicos = await getServicos(empresaId);
        let response = 'Serviços disponíveis:\n';
        servicos.forEach((servico, index) => {
            response += `${index + 1}. ${servico.nome}\n`;
        });
        response += '\nPara selecionar um serviço, responda com o número correspondente.';
        await message.reply(response);

        conversationState[userId] = {
            servicos: servicos,
            step: 'escolhendo_servico'
        };

    } else if (/^\d+$/.test(message.body) && conversationState[userId]?.step === 'escolhendo_servico') {
        const escolha = parseInt(message.body) - 1;
        const servicos = conversationState[userId].servicos;

        if (escolha >= 0 && escolha < servicos.length) {
            const servicoEscolhido = servicos[escolha];
            const profissionais = await getProfissionais(empresaId, servicoEscolhido.id);

            let response = 'Profissionais disponíveis:\n';
            profissionais.forEach((profissional, index) => {
                response += `${index + 1}. ${profissional.nome}\n`;
            });
            response += '\nPara selecionar um profissional, responda com o número correspondente.';
            await message.reply(response);

            conversationState[userId] = {
                ...conversationState[userId],
                profissionais: profissionais,
                servicoEscolhido: servicoEscolhido,
                step: 'escolhendo_profissional'
            };
        } else {
            await message.reply('Por favor, escolha um número válido de serviço.');
        }
    } else if (/^\d+$/.test(message.body) && conversationState[userId]?.step === 'escolhendo_profissional') {
        const escolha = parseInt(message.body) - 1;
        const profissionais = conversationState[userId].profissionais;

        if (escolha >= 0 && escolha < profissionais.length) {
            const profissionalEscolhido = profissionais[escolha];
            const servicoEscolhido = conversationState[userId].servicoEscolhido;

            const disponibilidades = await getDisponibilidades(profissionalEscolhido.id);
            const disponibilidadesFormatadas = formatarDisponibilidades(disponibilidades, 7, servicoEscolhido.duracao);

            let response = 'Disponibilidades:\n\n';
            disponibilidadesFormatadas.forEach(dia => {
                response += `${dia.data} (${dia.diaSemana}):\n`;
                dia.horarios.forEach(horario => {
                    if (!horario.ocupado) {
                        response += `  ${horario.inicio} - ${horario.fim}\n`;
                    }
                });
                response += '\n';
            });
            response += 'Para agendar, responda com a data e horário desejados no formato "DD/MM/YYYY HH:MM".';
            await message.reply(response);

            conversationState[userId] = {
                ...conversationState[userId],
                profissionalEscolhido: profissionalEscolhido,
                disponibilidades: disponibilidadesFormatadas,
                step: 'escolhendo_horario'
            };
        } else {
            await message.reply('Por favor, escolha um número válido de profissional.');
        }
    } else if (conversationState[userId]?.step === 'escolhendo_horario') {
        // Implementar lógica para validar e agendar o horário escolhido
        // ...
    } else {
        await message.reply('Comando não reconhecido. Digite !servicos para começar.');
    }
});

async function getServicos(empresaId) {
    try {
        const response = await axios.get(`http://localhost:5000/api/servicos/${empresaId}`);
        return response.data;
    } catch (error) {
        console.error('Erro ao buscar serviços:', error);
        return [];
    }
}

async function getProfissionais(empresaId, servicoId) {
    try {
        const botToken = process.env.BOT_API_TOKEN;
        const response = await axios.get(`http://localhost:5000/api/profissionais-por-servico/${servicoId}?empresa_id=${empresaId}`, {
            headers: { 'Authorization': `Bearer ${botToken}` }
        });
        return response.data;
    } catch (error) {
        console.error('Erro ao buscar disponibilidades:', error.response ? error.response.data : error.message);
        return [];
    }
}

async function getDisponibilidades(profissionalId) {
    try {
        const botToken = process.env.BOT_API_TOKEN;
        const response = await axios.get(`http://localhost:5000/api/bot/disponibilidades/profissional/${profissionalId}`, {
            headers: { 'Authorization': `Bearer ${botToken}` } // Mudança aqui
        });
        return response.data;
    } catch (error) {
        console.error('Erro ao buscar disponibilidades:', error.response ? error.response.data : error.message);
        return [];
    }
}

function formatarDisponibilidades(disponibilidades, dias, servicoDuracao) {
    if (!disponibilidades || disponibilidades.length === 0) {
        return [];
    }

    const hoje = new Date();
    const disponibilidadesFormatadas = [];
    const diasSemana = ['Domingo', 'Segunda-feira', 'Terça-feira', 'Quarta-feira', 'Quinta-feira', 'Sexta-feira', 'Sábado'];

    for (let i = 0; i < dias; i++) {
        const data = new Date(hoje);
        data.setDate(hoje.getDate() + i);
        const diaSemana = diasSemana[data.getDay()];

        const disponibilidadesDoDia = disponibilidades.filter(d => d.dia_semana === diaSemana);

        if (disponibilidadesDoDia.length > 0) {
            const horariosDistribuidos = distribuirHorarios(disponibilidadesDoDia[0], servicoDuracao);
            
            disponibilidadesFormatadas.push({
                data: data.toISOString().split('T')[0],
                diaSemana: diaSemana,
                horarios: horariosDistribuidos
            });
        }
    }

    return disponibilidadesFormatadas;
}

function distribuirHorarios(disponibilidade, servicoDuracao) {
    const horarios = [];
    const inicio = new Date(`2000-01-01T${disponibilidade.hora_inicio}`);
    const fim = new Date(`2000-01-01T${disponibilidade.hora_fim}`);

    while (inicio < fim) {
        const horarioFim = new Date(inicio.getTime() + servicoDuracao * 60000);
        if (horarioFim <= fim) {
            horarios.push({
                inicio: inicio.toTimeString().slice(0, 5),
                fim: horarioFim.toTimeString().slice(0, 5),
                ocupado: false // Assumindo que não está ocupado inicialmente
            });
        }
        inicio.setTime(inicio.getTime() + servicoDuracao * 60000);
    }

    return horarios;
}

client.initialize();

AgendamentoForm.js:
import React, { useState, useEffect } from 'react';
import axios from 'axios';
import './AgendamentoForm.css';
import { useNavigate } from 'react-router-dom';
import Sidebar from './Sidebar';

const AgendamentoForm = () => {
  const [clientes, setClientes] = useState([]);
  const [servicos, setServicos] = useState([]);
  const [profissionais, setProfissionais] = useState([]);
  const [disponibilidades, setDisponibilidades] = useState([]);
  const navigate = useNavigate();
  const [agendamento, setAgendamento] = useState({
    empresa_id: '', // Será preenchido automaticamente
    cliente_id: '',
    servico_id: '',
    profissional_id: '',
    data_horario_agendamento: ''
  });
  const [message, setMessage] = useState('');
  const [messageType, setMessageType] = useState('');
  /* const [loading, setLoading] = useState(false); */
  const [diasExibicao, setDiasExibicao] = useState(7);
  /* const navigate = useNavigate(); */
  const [isSidebarOpen, setIsSidebarOpen] = useState(true);

  const handleSidebarToggle = (isOpen) => {
    setIsSidebarOpen(isOpen);
  };

  const API_BASE_URL = process.env.REACT_APP_API_URL;

  const handleExibirDisponibilidade = () => {
    navigate('/disponibilidadesPage', { 
      state: { 
        disponibilidades, 
        agendamento, 
        profissionais, 
        servicos 
      } 
    });
  };

  useEffect(() => {
    const token = localStorage.getItem('token');
    if (token) {
      // Carregar clientes, serviços e profissionais
      axios.get(`${API_BASE_URL}/clientes`, { headers: { Authorization: `Bearer ${token}` } })
        .then(response => setClientes(response.data))
        .catch(error => console.error('Erro ao carregar clientes:', error));

      axios.get(`${API_BASE_URL}/servicos`, { headers: { Authorization: `Bearer ${token}` } })
        .then(response => setServicos(response.data))
        .catch(error => console.error('Erro ao carregar serviços:', error));

      axios.get(`${API_BASE_URL}/profissionais`, { headers: { Authorization: `Bearer ${token}` } })
        .then(response => setProfissionais(response.data))
        .catch(error => console.error('Erro ao carregar profissionais:', error));
    }
  }, [API_BASE_URL]);

  const handleChange = (e) => {
    const { name, value } = e.target;
    setAgendamento({ ...agendamento, [name]: value });
  
    if (name === 'servico_id') {
      carregarProfissionaisPorServico(value);
    }
  
    if (name === 'profissional_id') {
      carregarDisponibilidades(value);
    }
  
    // Validar campos obrigatórios
    if (!agendamento.cliente_id || !agendamento.servico_id || !agendamento.profissional_id || !agendamento.data_horario_agendamento) {
      setMessage('Todos os campos são obrigatórios');
      setMessageType('error');
    } else {
      setMessage('');
      setMessageType('');
    }
  }; 

  const carregarProfissionaisPorServico = (servicoId) => {
    const token = localStorage.getItem('token');
    axios.get(`${API_BASE_URL}/web/profissionais-por-servico/${servicoId}`, { headers: { Authorization: `Bearer ${token}` } })
      .then(response => setProfissionais(response.data))
      .catch(error => console.error('Erro ao carregar profissionais por serviço:', error));
  };

  const carregarDisponibilidades = (profissionalId) => {
    const token = localStorage.getItem('token');
    const servicoDuracao = servicos.find(s => s.id === parseInt(agendamento.servico_id))?.duracao;
  
    axios.get(`${API_BASE_URL}/web/disponibilidades/profissional/${profissionalId}`, {
      headers: { Authorization: `Bearer ${token}` }
    })
      .then(response => {
        console.log('Dados recebidos:', response.data);
        const disponibilidadesFormatadas = formatarDisponibilidades(response.data, diasExibicao, servicoDuracao);
        console.log('Disponibilidades formatadas:', disponibilidadesFormatadas);
  
        // Filtrar disponibilidades baseado em agendamentos existentes
        axios.get(`${API_BASE_URL}/agendamentos/profissional/${profissionalId}`, {
          headers: { Authorization: `Bearer ${token}` }
        })
          .then(agendamentoResponse => {
            console.log('Retorno do backend1: ', agendamentoResponse.data);
            const agendamentosExistentes = agendamentoResponse.data;
            const disponibilidadesFiltradas = filtrarHorarios(disponibilidadesFormatadas, agendamentosExistentes);
            setDisponibilidades(disponibilidadesFiltradas);
          })
          .catch(error => {
            console.error('Erro ao carregar agendamentos:', error);
            setDisponibilidades([]);
            setMessage('Erro ao carregar agendamentos. Por favor, tente novamente.');
            setMessageType('error');
          });
      })
      .catch(error => {
        console.error('Erro ao carregar disponibilidades:', error);
        setDisponibilidades([]);
        setMessage('Erro ao carregar disponibilidades. Por favor, tente novamente.');
        setMessageType('error');
      });
  };
  
  const filtrarHorarios = (disponibilidades, agendamentos) => {
    return disponibilidades.map(dia => {
      const horariosFiltrados = dia.horarios.map(horario => {
        const horarioInicio = new Date(`${dia.data}T${horario.inicio}`);
        const horarioFim = new Date(`${dia.data}T${horario.fim}`);
  
        const agendamentoConflito = agendamentos.find(ag => {
          const agendamentoInicio = new Date(ag.data_horario_agendamento);
          const agendamentoFim = new Date(ag.data_horario_agendamento);
          agendamentoFim.setMinutes(agendamentoFim.getMinutes() + ag.servico_duracao);
  
          return (
            (agendamentoInicio < horarioFim) && 
            (agendamentoFim > horarioInicio)
          );
        });
  
        return {
          ...horario,
          ocupado: Boolean(agendamentoConflito),
          cliente_nome: agendamentoConflito ? agendamentoConflito.cliente_nome : null,
          servico_nome: agendamentoConflito ? agendamentoConflito.servico_nome : null
        };
      });
  
      return {
        ...dia,
        horarios: horariosFiltrados
      };
    });
  };
  
  
  const formatarDisponibilidades = (disponibilidades, dias, servicoDuracao) => {
    if (!disponibilidades || disponibilidades.length === 0) {
      return [];
    }
  
    const hoje = new Date();
    const disponibilidadesFormatadas = [];
    const diasSemana = ['Domingo', 'Segunda-feira', 'Terça-feira', 'Quarta-feira', 'Quinta-feira', 'Sexta-feira', 'Sábado'];
  
    for (let i = 0; i < dias; i++) {
      const data = new Date(hoje);
      data.setDate(hoje.getDate() + i);
      const diaSemana = diasSemana[data.getDay()];
  
      const disponibilidadesDoDia = disponibilidades.filter(d => d.dia_semana === diaSemana);
  
      if (disponibilidadesDoDia.length > 0) {
        const horariosDistribuidos = distribuirHorarios(disponibilidadesDoDia[0], servicoDuracao);
        
        disponibilidadesFormatadas.push({
          data: data.toISOString().split('T')[0],
          diaSemana: diaSemana,
          horarios: horariosDistribuidos
        });
      }
    }
  
    return disponibilidadesFormatadas;
  };
  
  const distribuirHorarios = (disponibilidade, servicoDuracao) => {
    const horarios = [];
    const inicio = new Date(`2000-01-01T${disponibilidade.hora_inicio}`);
    const fim = new Date(`2000-01-01T${disponibilidade.hora_fim}`);
  
    while (inicio < fim) {
      const horarioFim = new Date(inicio.getTime() + servicoDuracao * 60000);
      if (horarioFim <= fim) {
        horarios.push({
          inicio: inicio.toTimeString().slice(0, 5),
          fim: horarioFim.toTimeString().slice(0, 5)
        });
      }
      inicio.setTime(inicio.getTime() + servicoDuracao * 60000);
    }
  
    return horarios;
  };

  const handleCancel = () => {
    navigate('/dashboard');
  };

  /* const handleSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);
    console.log("Oiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii");
    try {
      const token = localStorage.getItem('token');
      await axios.post(`${API_BASE_URL}/agendamentos`, agendamento, {
        headers: { Authorization: `Bearer ${token}` }
      });
      setMessage('Agendamento realizado com sucesso!');
      setMessageType('success');
    } catch (err) {
      if (err.response && err.response.status === 400) {
        setMessage(err.response.data.message || 'Dados inválidos ou conflito de horário.');
        setMessageType('error');  
      } else {
        setMessage('Erro ao realizar agendamento. Por favor, tente novamente.');
        setMessageType('error');
      }
    } finally {
      setLoading(false);
    }
  }; */

  return (
    <div className={`form-layout ${isSidebarOpen ? 'sidebar-open' : 'sidebar-closed'}`}>
    <Sidebar onToggle={handleSidebarToggle} />
    <div className="agendamento-container">    
      <h1>Agendamento - Filtro Por Serviço + Profissional</h1>        
      {message && <div className={`floating-message ${messageType}`}>{message}</div>}
      {/* <form onSubmit={handleSubmit} className="agendamento-form">         */}
      <form className="agendamento-form">        
        <div className="agendamento-form-header">          
          <label>Cliente</label>        
          <select name="cliente_id" value={agendamento.cliente_id} onChange={handleChange} required>
            <option value="">Selecione um cliente</option>
            {clientes.map(cliente => (
            <option key={cliente.id} value={cliente.id}>{cliente.nome}</option>
            ))}
          </select>

          <label>Serviço</label>
          <select name="servico_id" value={agendamento.servico_id} onChange={handleChange} required>
            <option value="">Selecione um serviço</option>
            {servicos.map(servico => (
              <option key={servico.id} value={servico.id}>{servico.nome}</option>
            ))}
          </select>

          <label>Dias de exibição</label>
          <select value={diasExibicao} onChange={(e) => setDiasExibicao(Number(e.target.value))}>
            <option value={7}>7 dias</option>
            <option value={14}>14 dias</option>
            <option value={21}>21 dias</option>
            <option value={30}>30 dias</option>
          </select>

          <label>Profissional</label>
          <select 
            name="profissional_id" 
            value={agendamento.profissional_id} 
            onChange={handleChange} 
            required
            disabled={!agendamento.servico_id}
          >
          <option value="">Selecione um profissional</option>
             {profissionais.map(profissional => (
             <option key={profissional.id} value={profissional.id}>{profissional.nome}</option>
             ))}
          </select>
          <div className="button-container">
          <button 
            type="button" 
            onClick={handleExibirDisponibilidade} 
            className="exibir-disponibilidade-button"
            disabled={!agendamento.profissional_id}
          >
            Exibir Disponibilidade
          </button>

          <button className="sair-button" type="button" onClick={handleCancel} >Sair</button>
          </div>
        </div>
  
      </form>
    </div>
  </div>  
  );
};

export default AgendamentoForm;

agendamento.js:
const express = require('express');
const router = express.Router();
const agendamentoController = require('../controllers/agendamentoController');
const authMiddleware = require('../middleware/authMiddleware');
const db = require('../config/db');

router.post('/agendamentos', authMiddleware, agendamentoController.createAgendamento);
router.get('/agendamentos', authMiddleware, agendamentoController.getAgendamentos);
router.put('/agendamentos/:id', authMiddleware, agendamentoController.updateAgendamento);
router.delete('/agendamentos/:id', authMiddleware, agendamentoController.deleteAgendamento);
router.get('/agendamentos/profissional/:profissionalId', authMiddleware, agendamentoController.getAgendamentosByProfissional);

router.get('/agendamentos/servico/:servico_id', authMiddleware, async (req, res) => {
    const { servico_id } = req.params;
    try {
      const [results] = await db.promise().query(
        `SELECT a.*, c.nome as cliente_nome, s.nome as servico_nome, s.duracao as servico_duracao
         FROM agendamentos a
         JOIN clientes c ON a.cliente_id = c.id
         JOIN servicos s ON a.servico_id = s.id
         WHERE a.servico_id = ?`,
        [servico_id]
      );
      res.json(results);
    } catch (error) {
      console.error('Erro ao buscar agendamentos por serviço:', error);
      res.status(500).json({ error: 'Erro ao buscar agendamentos por serviço' });
    }
    });

module.exports = router;

agendamentoController.js:
const db = require('../config/db');
const Agendamento = require('../models/agendamento');

// Função para verificar conflitos de agendamento
const verificarConflitoAgendamento = async (empresa_id, profissional_id, data_horario_agendamento, servico_id) => {
  const [result] = await db.promise().query(
    `SELECT * FROM agendamentos 
     WHERE empresa_id = ? 
     AND profissional_id = ? 
     AND (
       (? < TIMESTAMPADD(MINUTE, (SELECT duracao FROM servicos WHERE id = agendamentos.servico_id), data_horario_agendamento)) 
       AND 
       (TIMESTAMPADD(MINUTE, (SELECT duracao FROM servicos WHERE id = ?), ?) > data_horario_agendamento)
     )`,
    [empresa_id, profissional_id, data_horario_agendamento, servico_id, data_horario_agendamento]
  );
/*   console.log('Resultado da verificação: ', result); */  
  return result.length > 0;
};

/* Serve para WEB e com ChatBot */
exports.createAgendamento = async (req, res) => {
  const { empresa_id, cliente_id, profissional_id, servico_id, data_horario_agendamento, status } = req.body;

  // Verificar se todos os campos obrigatórios foram fornecidos
  if (!empresa_id || !cliente_id || !profissional_id || !servico_id || !data_horario_agendamento) {
    return res.status(400).send({ message: 'Todos os campos são obrigatórios.' });
  }

  try {
    // Verificar se já existe um conflito de agendamento
    const conflito = await verificarConflitoAgendamento(empresa_id, profissional_id, data_horario_agendamento, servico_id);
    if (conflito) {
      return res.status(400).send({ message: 'Horário já reservado. Por favor, escolha outro horário.' });
    }

    const novoAgendamento = { empresa_id, cliente_id, profissional_id, servico_id, data_horario_agendamento, status };
    const result = await Agendamento.create(novoAgendamento);
    res.status(201).send({ message: 'Agendamento criado com sucesso', agendamentoId: result.insertId });
  } catch (err) {
    res.status(500).send({ message: 'Erro ao criar agendamento', error: err.message });
  }
};

exports.getAgendamentosByProfissional = async (req, res) => {
  const { profissionalId } = req.params;
  const empresa_id = req.user.empresa_id; // Assumindo que o ID da empresa está armazenado no token do usuário
  
  try {
    const [results] = await db.promise().query(
      `SELECT a.id, a.data_horario_agendamento, a.cliente_id, a.servico_id, a.profissional_id, c.nome AS cliente_nome, s.nome AS servico_nome, s.duracao AS servico_duracao
       FROM agendamentos a
       JOIN clientes c ON a.cliente_id = c.id
       JOIN servicos s ON a.servico_id = s.id
       WHERE a.profissional_id = ? AND a.empresa_id = ?`,
      [profissionalId, empresa_id]
    );
    res.json(results);
    console.log('Retorno do sql: ', results);
  } catch (error) {
    console.error('Erro ao buscar agendamentos por profissional:', error);
    res.status(500).json({ error: 'Erro ao buscar agendamentos por profissional' });
  }
};


exports.getAgendamentos = async (req, res) => {
  const empresa_id = req.user.empresa_id;
  try {
    const [results] = await db.promise().query('SELECT * FROM agendamentos WHERE empresa_id = ?', [empresa_id]);
    res.json(results);
  } catch (error) {
    console.error('Erro ao buscar agendamentos:', error);
    res.status(500).json({ error: 'Erro ao buscar agendamentos' });
  }
};

exports.updateAgendamento = async (req, res) => {
  const { id } = req.params;
  const { cliente_id, profissional_id, servico_id, data_horario_agendamento, status } = req.body;

  try {
    const [result] = await db.promise().query(
      'UPDATE agendamentos SET cliente_id = ?, profissional_id = ?, servico_id = ?, data_horario_agendamento = ?, status = ? WHERE id = ?',
      [cliente_id, profissional_id, servico_id, data_horario_agendamento, status, id]
    );
    
    if (result.affectedRows > 0) {
      res.json({ message: 'Agendamento atualizado com sucesso' });
    } else {
      res.status(404).json({ error: 'Agendamento não encontrado' });
    }
  } catch (error) {
    console.error('Erro ao atualizar agendamento:', error);
    res.status(500).json({ error: 'Erro ao atualizar agendamento' });
  }
};

exports.deleteAgendamento = async (req, res) => {
  const { id } = req.params;

  try {
    const [result] = await db.promise().query('DELETE FROM agendamentos WHERE id = ?', [id]);

    if (result.affectedRows > 0) {
      res.json({ message: 'Agendamento deletado com sucesso' });
    } else {
      res.status(404).json({ error: 'Agendamento não encontrado' });
    }
  } catch (error) {
    console.error('Erro ao deletar agendamento:', error);
    res.status(500).json({ error: 'Erro ao deletar agendamento' });
  }
};
