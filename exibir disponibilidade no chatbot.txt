fiz algumas alterações, mas está aparecendo erro "Erro ao buscar disponibilidades: AxiosError: Request failed with status code 401"

no código disponibilidade.js adicionei router.get('/disponibilidades/profissional/:profissional_id', botAuthMiddleware, async (req, res) => { , porém, parece que não chega até ele.

segue os códigos para análise.

bot.js:
require('dotenv').config();
const { Client } = require('whatsapp-web.js');
const qrcode = require('qrcode-terminal');
const axios = require('axios');
const whatsappService = require('./whatsappService');

const client = new Client();

const conversationState = {};

client.on('qr', (qr) => {
    qrcode.generate(qr, { small: true });
});

client.on('ready', () => {
    console.log('Client is ready!');
});

client.on('message', async (message) => {
    const empresaId = await whatsappService.getEmpresaByWhatsapp(message.to);
    if (!empresaId) {
        await message.reply('Desculpe, não foi possível identificar sua empresa.');
        return;
    }

    const userId = message.from;

    if (message.body === '!servicos') {
        const servicos = await getServicos(empresaId);
        let response = 'Serviços disponíveis:\n';
        servicos.forEach((servico, index) => {
            response += `${index + 1}. ${servico.nome}\n`;
        });
        response += '\nPara selecionar um serviço, responda com o número correspondente.';
        await message.reply(response);

        conversationState[userId] = {
            servicos: servicos,
            step: 'escolhendo_servico'
        };

    } else if (/^\d+$/.test(message.body) && conversationState[userId]?.step === 'escolhendo_servico') {
        const escolha = parseInt(message.body) - 1;
        const servicos = conversationState[userId].servicos;

        if (escolha >= 0 && escolha < servicos.length) {
            const servicoEscolhido = servicos[escolha];
            const profissionais = await getProfissionais(empresaId, servicoEscolhido.id);

            let response = 'Profissionais disponíveis:\n';
            profissionais.forEach((profissional, index) => {
                response += `${index + 1}. ${profissional.nome}\n`;
            });
            response += '\nPara selecionar um profissional, responda com o número correspondente.';
            await message.reply(response);

            conversationState[userId] = {
                ...conversationState[userId],
                profissionais: profissionais,
                servicoEscolhido: servicoEscolhido,
                step: 'escolhendo_profissional'
            };
        } else {
            await message.reply('Por favor, escolha um número válido de serviço.');
        }
    } else if (/^\d+$/.test(message.body) && conversationState[userId]?.step === 'escolhendo_profissional') {
        const escolha = parseInt(message.body) - 1;
        const profissionais = conversationState[userId].profissionais;

        if (escolha >= 0 && escolha < profissionais.length) {
            const profissionalEscolhido = profissionais[escolha];
            const servicoEscolhido = conversationState[userId].servicoEscolhido;

            console.log("Profissional ID: ", profissionalEscolhido.id);
            const disponibilidades = await getDisponibilidades(profissionalEscolhido.id);
            const disponibilidadesFormatadas = formatarDisponibilidades(disponibilidades, 7, servicoEscolhido.duracao);

            let response = 'Disponibilidades:\n\n';
            disponibilidadesFormatadas.forEach(dia => {
                response += `${dia.data} (${dia.diaSemana}):\n`;
                dia.horarios.forEach(horario => {
                    if (!horario.ocupado) {
                        response += `  ${horario.inicio} - ${horario.fim}\n`;
                    }
                });
                response += '\n';
            });
            response += 'Para agendar, responda com a data e horário desejados no formato "DD/MM/YYYY HH:MM".';
            await message.reply(response);

            conversationState[userId] = {
                ...conversationState[userId],
                profissionalEscolhido: profissionalEscolhido,
                disponibilidades: disponibilidadesFormatadas,
                step: 'escolhendo_horario'
            };
        } else {
            await message.reply('Por favor, escolha um número válido de profissional.');
        }
    } else if (conversationState[userId]?.step === 'escolhendo_horario') {
        // Implementar lógica para validar e agendar o horário escolhido
        // ...
    } else {
        await message.reply('Comando não reconhecido. Digite !servicos para começar.');
    }
});

async function getServicos(empresaId) {
    try {
        const response = await axios.get(`http://localhost:5000/api/servicos/${empresaId}`);
        return response.data;
    } catch (error) {
        console.error('Erro ao buscar serviços:', error);
        return [];
    }
}

async function getProfissionais(empresaId, servicoId) {
    try {
        const botToken = process.env.BOT_API_TOKEN;
        const response = await axios.get(`http://localhost:5000/api/profissionais-por-servico/${servicoId}?empresa_id=${empresaId}`, {
            headers: { 'X-Bot-Token': botToken }
        });
        return response.data;
    } catch (error) {
        console.error('Erro ao buscar profissionais:', error);
        return [];
    }
}

async function getDisponibilidades(profissionalId) {
    try {
        const botToken = process.env.BOT_API_TOKEN;
        const response = await axios.get(`http://localhost:5000/api/disponibilidades/profissional/${profissionalId}`, {
            headers: { 'X-Bot-Token': botToken }
        });
        return response.data;
    } catch (error) {
        console.error('Erro ao buscar disponibilidades:', error);
        return [];
    }
}

function formatarDisponibilidades(disponibilidades, dias, servicoDuracao) {
    if (!disponibilidades || disponibilidades.length === 0) {
        return [];
    }

    const hoje = new Date();
    const disponibilidadesFormatadas = [];
    const diasSemana = ['Domingo', 'Segunda-feira', 'Terça-feira', 'Quarta-feira', 'Quinta-feira', 'Sexta-feira', 'Sábado'];

    for (let i = 0; i < dias; i++) {
        const data = new Date(hoje);
        data.setDate(hoje.getDate() + i);
        const diaSemana = diasSemana[data.getDay()];

        const disponibilidadesDoDia = disponibilidades.filter(d => d.dia_semana === diaSemana);

        if (disponibilidadesDoDia.length > 0) {
            const horariosDistribuidos = distribuirHorarios(disponibilidadesDoDia[0], servicoDuracao);
            
            disponibilidadesFormatadas.push({
                data: data.toISOString().split('T')[0],
                diaSemana: diaSemana,
                horarios: horariosDistribuidos
            });
        }
    }

    return disponibilidadesFormatadas;
}

function distribuirHorarios(disponibilidade, servicoDuracao) {
    const horarios = [];
    const inicio = new Date(`2000-01-01T${disponibilidade.hora_inicio}`);
    const fim = new Date(`2000-01-01T${disponibilidade.hora_fim}`);

    while (inicio < fim) {
        const horarioFim = new Date(inicio.getTime() + servicoDuracao * 60000);
        if (horarioFim <= fim) {
            horarios.push({
                inicio: inicio.toTimeString().slice(0, 5),
                fim: horarioFim.toTimeString().slice(0, 5),
                ocupado: false // Assumindo que não está ocupado inicialmente
            });
        }
        inicio.setTime(inicio.getTime() + servicoDuracao * 60000);
    }

    return horarios;
}

client.initialize();

server.js:
require('dotenv').config();

const express = require('express');
const cors = require('cors');
const authRoutes = require('./routes/auth');
const clienteRoutes = require('./routes/cliente');
const usuarioRoutes = require('./routes/usuario');
const empresaRoutes = require('./routes/empresa');
const servicoRoutes = require('./routes/servico');
const profissionalServicoRoutes = require('./routes/profissionalServico');
const profissionalRoutes = require('./routes/profissional');
const userRoutes = require('./routes/user');
const disponibilidadeRoutes = require('./routes/disponibilidade');
const agendamentoRoutes = require('./routes/agendamento');
const cancelamentoRoutes = require('./routes/cancelamento');

const app = express();

app.use((req, res, next) => {
    console.log(`Requisição recebida: ${req.method} ${req.path}`);
    next();
});

app.use(cors());
app.use(express.json());

app.use('/api/auth', authRoutes);
app.use('/api', clienteRoutes);
app.use('/api', usuarioRoutes);
app.use('/api', empresaRoutes);
app.use('/api', servicoRoutes);
app.use('/api', userRoutes);
app.use('/api', disponibilidadeRoutes);
app.use('/api', agendamentoRoutes);
app.use('/api', cancelamentoRoutes);

app.use('/api/web', profissionalServicoRoutes);
app.use('/api', profissionalRoutes);

const PORT = process.env.PORT || 5000;
app.listen(PORT, () => {
    console.log(`Servidor rodando na porta ${PORT}`);
});

disponibilidade.js:
const express = require('express');
const router = express.Router();
const disponibilidadeController = require('../controllers/disponibilidadeController');
const authMiddleware = require('../middleware/authMiddleware');
const botAuthMiddleware = require('../middleware/botAuthMiddleware');

const db = require('../config/db');

/* Para utilizar com ManyChat */
router.post('/disponibilidades/verificar', authMiddleware, disponibilidadeController.verificarDisponibilidade);

router.post('/disponibilidades', authMiddleware, disponibilidadeController.createDisponibilidade);

// Nova rota para buscar disponibilidades por profissional e intervalo de datas para web
router.get('/disponibilidades/profissional/:profissional_id', authMiddleware, async (req, res) => {
  const { profissional_id } = req.params;
  console.log("Profissional no API WEB: ", profissional_id);

  try {
    const [results] = await db.promise().query(
      'SELECT * FROM disponibilidades WHERE profissional_id = ?',
      [profissional_id]
    );
    res.json(results);
  } catch (error) {
    console.error('Erro ao buscar disponibilidades:', error);
    res.status(500).json({ error: 'Erro ao buscar disponibilidades' });
  }
});

// Nova rota para buscar disponibilidades por profissional e intervalo de datas Para integrar com WhatsApp
router.get('/disponibilidades/profissional/:profissional_id', botAuthMiddleware, async (req, res) => {
  const { profissional_id } = req.params;
  console.log("Profissional no API Bot: ", profissional_id);

  try {
    const [results] = await db.promise().query(
      'SELECT * FROM disponibilidades WHERE profissional_id = ?',
      [profissional_id]
    );
    res.json(results);
  } catch (error) {
    console.error('Erro ao buscar disponibilidades:', error);
    res.status(500).json({ error: 'Erro ao buscar disponibilidades' });
  }
});

// Rota para filtrar por serviço de todos os profissionais
/* router.get('/disponibilidades/servico/:servico_id', authMiddleware, async (req, res) => {
  const { servico_id } = req.params;

  try {
    const [results] = await db.promise().query(
      `SELECT d.*, p.nome as profissional_nome
       FROM disponibilidades d
       JOIN profissionais p ON d.profissional_id = p.id
       JOIN profissional_servicos ps ON p.id = ps.profissional_id
       WHERE ps.servico_id = ?
       ORDER BY d.hora_inicio`,
      [servico_id]
    );
    res.json(results);
  } catch (error) {
    console.error('Erro ao buscar disponibilidades por serviço:', error);
    res.status(500).json({ error: 'Erro ao buscar disponibilidades por serviço' });
  }
}); */
router.get('/disponibilidades/servico/:servico_id', authMiddleware, async (req, res) => {
  const { servico_id } = req.params;

  try {
    const [results] = await db.promise().query(
      `SELECT d.*, p.nome as profissional_nome, s.duracao as servico_duracao
       FROM disponibilidades d
       JOIN profissionais p ON d.profissional_id = p.id
       JOIN profissional_servicos ps ON p.id = ps.profissional_id
       JOIN servicos s ON ps.servico_id = s.id
       WHERE ps.servico_id = ?
       ORDER BY d.hora_inicio`,
      [servico_id]
    );
    res.json(results);
  } catch (error) {
    console.error('Erro ao buscar disponibilidades por serviço:', error);
    res.status(500).json({ error: 'Erro ao buscar disponibilidades por serviço' });
  }
});

// Rota para filtrar por profissional de todos os serviços
router.get('/disponibilidades/profissionalservico/:profissional_id', authMiddleware, async (req, res) => {
  const { profissional_id } = req.params;

  try {
    const [results] = await db.promise().query(
       `SELECT d.*, s.nome as servico_nome, s.duracao as servico_duracao, s.id as servico_id
       FROM disponibilidades d
       JOIN profissionais p ON d.profissional_id = p.id
       JOIN profissional_servicos ps ON p.id = ps.profissional_id
	     JOIN servicos s ON ps.servico_id = s.id
       WHERE ps.profissional_id = ?
       ORDER BY d.hora_inicio`,
      [profissional_id]
    );
    res.json(results);
  } catch (error) {
    console.error('Erro ao buscar disponibilidades por profissional x serviço:', error);
    res.status(500).json({ error: 'Erro ao buscar disponibilidades por profissional x serviço' });
  }
});

/* router.get('/disponibilidades/profissional/:profissional_id', authMiddleware, disponibilidadeController.getDisponibilidadesByProfissional); */

router.delete('/disponibilidades/:id', authMiddleware, disponibilidadeController.deleteDisponibilidade);

module.exports = router;
