preciso estilizar AgendamentoModal.js conforme os estilos utilizados CalendarioAgendamentoForm.css.

preciso que AgendamentoModal.js abra no meio da tela do CalendarioAgendamento.js.

AgendamentoModal.js:
import React, { useState, useEffect } from 'react';
import axios from 'axios';

const AgendamentoModal = ({ show, onClose, selectedDate }) => {
    const [clientes, setClientes] = useState([]);
    const [servicos, setServicos] = useState([]);
    const [profissionais, setProfissionais] = useState([]);
    const [disponibilidades, setDisponibilidades] = useState([]);
    const [agendamento, setAgendamento] = useState({
        cliente_id: '',
        servico_id: '',
        profissional_id: '',
        data_horario_agendamento: selectedDate
    });
    
    const API_BASE_URL = process.env.REACT_APP_API_URL;

    useEffect(() => {
        const token = localStorage.getItem('token');
        if (token) {
            axios.get(`${API_BASE_URL}/clientes`, { headers: { Authorization: `Bearer ${token}` } })
                .then(response => setClientes(response.data))
                .catch(error => console.error('Erro ao carregar clientes:', error));

            axios.get(`${API_BASE_URL}/servicos`, { headers: { Authorization: `Bearer ${token}` } })
                .then(response => setServicos(response.data))
                .catch(error => console.error('Erro ao carregar serviços:', error));
        }
    }, []);

    const handleChange = (e) => {
        const { name, value } = e.target;
        setAgendamento({ ...agendamento, [name]: value });

        if (name === 'servico_id') {
            carregarProfissionaisPorServico(value);
        }

        if (name === 'profissional_id') {
            carregarDisponibilidades(value);
        }
    };

    const carregarProfissionaisPorServico = (servicoId) => {
        const token = localStorage.getItem('token');
        axios.get(`${API_BASE_URL}/web/profissionais-por-servico/${servicoId}`, { headers: { Authorization: `Bearer ${token}` } })
            .then(response => setProfissionais(response.data))
            .catch(error => console.error('Erro ao carregar profissionais por serviço:', error));
    };

    const carregarDisponibilidades = (profissionalId) => {
        const token = localStorage.getItem('token');
        axios.get(`${API_BASE_URL}/web/disponibilidades/profissional/${profissionalId}`, { headers: { Authorization: `Bearer ${token}` } })
            .then(response => setDisponibilidades(response.data))
            .catch(error => console.error('Erro ao carregar disponibilidades:', error));
    };

    const handleSubmit = async (e) => {
        e.preventDefault();
        try {
            const token = localStorage.getItem('token');
            await axios.post(`${API_BASE_URL}/agendamentos`, agendamento, {
                headers: { Authorization: `Bearer ${token}` }
            });
            alert('Agendamento realizado com sucesso!');
            onClose();
        } catch (err) {
            console.error('Erro ao realizar agendamento:', err);
            alert('Erro ao realizar agendamento. Por favor, tente novamente.');
        }
    };

    if (!show) {
        return null;
    }

    return (
        <div className="modal">
            <div className="modal-content">
                <span className="close" onClick={onClose}>×</span>
                <form onSubmit={handleSubmit}>
                    <label>Cliente</label>
                    <select name="cliente_id" value={agendamento.cliente_id} onChange={handleChange} required>
                        <option value="">Selecione um cliente</option>
                        {clientes.map(cliente => (
                            <option key={cliente.id} value={cliente.id}>{cliente.nome}</option>
                        ))}
                    </select>

                    <label>Serviço</label>
                    <select name="servico_id" value={agendamento.servico_id} onChange={handleChange} required>
                        <option value="">Selecione um serviço</option>
                        {servicos.map(servico => (
                            <option key={servico.id} value={servico.id}>{servico.nome}</option>
                        ))}
                    </select>

                    <label>Profissional</label>
                    <select name="profissional_id" value={agendamento.profissional_id} onChange={handleChange} required>
                        <option value="">Selecione um profissional</option>
                        {profissionais.map(profissional => (
                            <option key={profissional.id} value={profissional.id}>{profissional.nome}</option>
                        ))}
                    </select>

                    <label>Data e Hora</label>
                    <input type="datetime-local" name="data_horario_agendamento" value={agendamento.data_horario_agendamento} onChange={handleChange} required />

                    <button type="submit">Agendar</button>
                </form>
            </div>
        </div>
    );
};

export default AgendamentoModal;

CalendarioAgendamentoForm.css:
/* AgendamentoForm.css */

/* Estilizando o container principal */
.agendamento-container {
  font-family: Arial, sans-serif;
  background-color: #F5F5F5;
  color: #333;
  padding: 10px;
  min-height: 50vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  transition: margin-left 0.3s ease;
}

/* Estilizando o formulário */
.agendamento-form {
  background-color: #FFFFFF;
  border-radius: 8px;
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
  padding: 5px;
  max-width: 300px;
  width: 100%;
  margin: 5px 0;
  box-sizing: border-box;
  display: flex;
  flex-direction: column;
}

/* Label e select */
.agendamento-form-header label {
  font-weight: bold;
  margin-right: 10px;
}

.agendamento-form-header select {
  padding: 5px 10px;
  border-radius: 4px;
  border: 1px solid #ccc;
  min-width: 180px;
}

.agendamento-form select {
  width: 100%;
  padding: 10px;
  margin: 10px 0;
  border: 1px solid #D3D3D3;
  border-radius: 4px;
  box-sizing: border-box;
  transition: border-color 0.3s, box-shadow 0.3s;
}

/* Estilizando o grid de disponibilidades */
.disponibilidades-grid {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
  gap: 20px;
  margin-top: 20px;
  max-height: 400px;
  overflow-y: auto;
  padding: 15px 0;
}

/* Estilizando os itens de disponibilidade */
.disponibilidade-item {
  background-color: #e0f7fa;
  padding: 10px;
  border-radius: 8px;
  box-shadow: 0 0 5px rgba(0, 0, 0, 0.1);
}

.disponibilidade-item p {
  margin: 5px 0;
}

.disponibilidade-item button {
  display: block;
  width: 100%;
  padding: 8px;
  margin-top: 10px;
  background-color: #00796b;
  color: white;
  border: none;
  border-radius: 4px;
  cursor: pointer;
}

.disponibilidade-item button:hover {
  background-color: #004d40;
}

/* Container para botões */
.button-container {
  display: flex;
  flex-direction: column;
  gap: 10px;
  margin-top: 20px;
}

/* Botões */
.agendamento-container .exibir-disponibilidade-button,
.agendamento-container .sair-button {
  background-color: #7965a6;
  color: white;
  padding: 12px;
  border: none;
  border-radius: 6px;
  cursor: pointer;
  font-size: 16px;
  margin-top: 15px;
  width: 100%;
  transition: background-color 0.3s, transform 0.3s;
}

.agendamento-container .exibir-disponibilidade-button:hover,
.agendamento-container .sair-button:hover {
  background-color: #512da8;
  transform: scale(1.05);
}

/* Estilizando os botões de agendamento e sair */
.agendar-button {
  padding: 10px 20px;
  margin-top: 20px;
  margin-right: 10px;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  font-size: 16px;
}

/* Mensagem de sucesso ou erro */
.floating-message {
  position: fixed;
  top: 20px;
  right: 20px;
  padding: 10px;
  border-radius: 4px;
  color: white;
  z-index: 200;
  transition: opacity 0.3s ease;
}

.floating-message.success {
  background-color: #4caf50;
}

.floating-message.error {
  background-color: #f44336;
}

/* Adicione estes estilos ao final do seu arquivo AgendamentoForm.css */

.exibir-disponibilidade-button {
  width: 100%;
  padding: 10px 20px;
  background-color: #4caf50;
  color: white;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  font-size: 16px;
  margin-top: 10px; /* Adiciona um espaço acima do botão */
  box-sizing: border-box; /* Garante que o padding não aumente a largura total */
}

.exibir-disponibilidade-button:hover {
  background-color: #45a049;
}

.disponibilidade-container {
  margin-top: 20px;
}

.voltar-button {
  padding: 10px 20px;
  margin-top: 20px;
  background-color: #2196F3;
  color: white;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  font-size: 16px;
}

.voltar-button:hover {
  background-color: #0b7dda;
}

@media (max-width: 480px) {
  .form-layout.sidebar-closed {
    padding-left: 40px; /* ajuste a largura da barra lateral */
  }
  
  .form-layout.sidebar-closed .sidebar {
    width: 30px; /* ajuste a largura da barra lateral */
    overflow: hidden;  
    background-color: transparent;
  }
  
  .form-layout.sidebar-closed .sidebar .toggle-button {
    position: absolute;
    left: 0;
    top: 0;
    z-index: 1;
  }
  
  .form-layout.sidebar-closed .sidebar .sidebar-nav {
    display: none;
  }

}

CalendarioAgendamento.js:
import React, { useState, useEffect, useContext, useCallback } from 'react';
import FullCalendar from '@fullcalendar/react';
import dayGridPlugin from '@fullcalendar/daygrid';
import timeGridPlugin from '@fullcalendar/timegrid';
import interactionPlugin from '@fullcalendar/interaction';
import ptBrLocale from '@fullcalendar/core/locales/pt-br';
import axios from 'axios';
import './CalendarioAgendamento.css';
import { useNavigate } from 'react-router-dom';
import CalendarioAgendamentoForm from './CalendarioAgendamentoForm';
import { AuthContext } from '../AuthContext'; // Importe o AuthContext
import useInterval from './useInterval'; // Certifique-se de ter um hook useInterval implementado
import AgendamentoModal from './AgendamentoModal';

const CalendarioAgendamento = () => {
  const [eventos, setEventos] = useState([]);
  const [profissionais, setProfissionais] = useState([]);
  const [profissionalSelecionado, setProfissionalSelecionado] = useState('');
  const [servicos, setServicos] = useState([]);
  const [clientes, setClientes] = useState([]);
  const [currentTimeEvent, setCurrentTimeEvent] = useState(null);
  const [horaInicial, setHoraInicial] = useState('08:00:00');
  const [horaFinal, setHoraFinal] = useState('19:00:00');
  const [showAgendamentoForm, setShowAgendamentoForm] = useState(false);
  const [showAgendamentoModal, setShowAgendamentoModal] = useState(false);
  const navigate = useNavigate();
  const [loading] = useState(false);
  const [selectedDate, setSelectedDate] = useState(null);

  const [eventoSelecionado, setEventoSelecionado] = useState(null);
  const [showEventoModal, setShowEventoModal] = useState(false);
  const [showConfirmacaoCancelamento, setShowConfirmacaoCancelamento] = useState(false);

  const API_BASE_URL = process.env.REACT_APP_API_URL;

  // Obter usuário logado e empresa do AuthContext
  const { usuarioLogado } = useContext(AuthContext); // Use o AuthContext para acessar os dados do usuário

  const formatarEventos = useCallback((agendamentos) => {
    if (clientes.length === 0 || servicos.length === 0 || profissionais.length === 0) {
      return [];
    }

    return agendamentos.map(agendamento => {
      const cliente = clientes.find(c => c.id === agendamento.cliente_id);
      const servico = servicos.find(s => s.id === agendamento.servico_id);
      const profissional = profissionais.find(p => p.id === agendamento.profissional_id);
      const duracaoServico = servico ? servico.duracao : 60;

      const dataInicio = new Date(agendamento.data_horario_agendamento);
      const dataFim = new Date(dataInicio.getTime() + duracaoServico * 60000);
      
      return {
        id: agendamento.id,
        title: `${cliente ? cliente.nome : 'Cliente'} - ${servico ? servico.nome : 'Serviço'}`,
        start: dataInicio,
        end: dataFim,
        color: profissional ? profissional.cor : obterCorProfissional(agendamento.profissional_id),
        extendedProps: {
          cliente_id: agendamento.cliente_id,  
          servico_id: agendamento.servico_id,  
          profissional_id: agendamento.profissional_id,  
        },
      };
    });
  }, [clientes, servicos, profissionais]);

  const carregarEventos = useCallback(async () => {
    console.log("Atualizando!!!");
    try {
      const token = localStorage.getItem('token');
      const response = await axios.get(`${API_BASE_URL}/agendamentos`, {
        headers: { Authorization: `Bearer ${token}` }
      });
      const eventosFormatados = formatarEventos(response.data);
      setEventos(eventosFormatados);
    } catch (error) {
      console.error('Erro ao carregar agendamentos:', error);
    }
  }, [API_BASE_URL, formatarEventos]);

  useEffect(() => {
    const token = localStorage.getItem('token');
    if (token) {
      axios.get(`${API_BASE_URL}/clientes`, { headers: { Authorization: `Bearer ${token}` } })
        .then(response => setClientes(response.data))
        .catch(error => console.error('Erro ao carregar clientes:', error));

      axios.get(`${API_BASE_URL}/servicos`, { headers: { Authorization: `Bearer ${token}` } })
        .then(response => setServicos(response.data))
        .catch(error => console.error('Erro ao carregar serviços:', error));

      axios.get(`${API_BASE_URL}/profissionais`, { headers: { Authorization: `Bearer ${token}` } })
        .then(response => setProfissionais(response.data))
        .catch(error => console.error('Erro ao carregar profissionais:', error));
    }
  }, [API_BASE_URL]);

  useEffect(() => {
    if (clientes.length > 0 && servicos.length > 0 && profissionais.length > 0) {
      carregarEventos();
    }
  }, [clientes, servicos, profissionais, carregarEventos]);

  useEffect(() => {
    const atualizarLinhaTempo = () => {
      const now = new Date();
      setCurrentTimeEvent({
        id: 'current-time',
        title: '',
        start: now,
        end: now,
        display: 'background',
        backgroundColor: 'red',
        borderColor: 'red'
      });
    };

    atualizarLinhaTempo();
    const intervalId = setInterval(atualizarLinhaTempo, 60000);

    return () => clearInterval(intervalId);
  }, []);

  const handleEventClick = (clickInfo) => {
    const evento = clickInfo.event;
    const cliente = clientes.find(c => c.id === evento.extendedProps.cliente_id);
    const servico = servicos.find(s => s.id === evento.extendedProps.servico_id);
    const profissional = profissionais.find(p => p.id === evento.extendedProps.profissional_id);
    const dataInicio = new Date(evento.start);
    const dataFim = new Date(evento.end);

    setEventoSelecionado({
      id: evento.id,
      title: evento.title,
      cliente: cliente ? cliente.nome : 'Cliente',
      servico: servico ? servico.nome : 'Serviço',
      profissional: profissional ? profissional.nome : 'Profissional',
      dataInicio: dataInicio.toLocaleString(),
      dataFim: dataFim.toLocaleString(),
    });

    setShowEventoModal(true);
  };

  const handleCloseEventoModal = () => {
    setShowEventoModal(false);
    setShowConfirmacaoCancelamento(false);
  };

  const handleCancelarAgendamento = () => {
    setShowConfirmacaoCancelamento(true);
  };

  const confirmarCancelamento = async () => {
    try {
      const token = localStorage.getItem('token');
      await axios.post(`${API_BASE_URL}/cancelamentos`, {
        agendamento_id: eventoSelecionado.id,
        usuario_id: usuarioLogado?.id // Usa o usuarioLogado.id do AuthContext
      }, {
        headers: { Authorization: `Bearer ${token}` }
      });

      // Remover o evento cancelado da lista de eventos
      setEventos(eventos.filter(evento => evento.id !== eventoSelecionado.id));

      handleCloseEventoModal();
      carregarEventos(); // Recarregar eventos para atualizar a visualização
    } catch (error) {
      console.error('Erro ao cancelar agendamento:', error);
      alert('Ocorreu um erro ao cancelar o agendamento. Por favor, tente novamente.');
    }
  };

  const carregarEventosPorProfissional = async (profissionalId) => {
    try {
      const token = localStorage.getItem('token');
      const response = await axios.get(`${API_BASE_URL}/agendamentos/profissional/${profissionalId}`, {
        headers: { Authorization: `Bearer ${token}` }
      });
      const eventosFormatados = formatarEventos(response.data);
      setEventos(eventosFormatados);
    } catch (error) {
      console.error('Erro ao carregar agendamentos do profissional:', error);
    }
  };

  const obterCorProfissional = (profissionalId) => {
    const cores = ['#FF5733', '#33FF57', '#3357FF', '#FF33F1', '#33FFF1'];
    return cores[profissionalId % cores.length];
  };

  const handleDateSelect = (selectInfo) => {
    if (selectInfo.view.type === 'timeGridDay') {
        setShowAgendamentoModal(true);
        setSelectedDate(selectInfo.startStr);
    }
    selectInfo.view.calendar.unselect();
  };

  const handleEventDrop = (dropInfo) => {
    console.log('Evento movido:', dropInfo.event);
  };

  const filtrarPorProfissional = (profissionalId) => {
    setProfissionalSelecionado(profissionalId);
    if (profissionalId) {
      carregarEventosPorProfissional(profissionalId);
    } else {
      carregarEventos();
    }
  };

  const handleCancel = () => {
    navigate('/dashboard');
  };

  useInterval(() => {
    carregarEventos();
  }, 180000); // Atualiza a cada 3 minutos (300000 ms)

  return (
    <div className="calendario-container">
      <div className="lista-profissionais">
        <button className="sair-button" type="button" onClick={handleCancel} disabled={loading}>Sair</button>
        <button className="atualizar-button" onClick={carregarEventos} disabled={loading}>Atualizar Dados</button>
        <button className="agendar-button" onClick={() => setShowAgendamentoForm(true)}>Agendar</button>
        {showAgendamentoForm && (
          <div className="agendamento-modal">
            <CalendarioAgendamentoForm />
            <button onClick={() => setShowAgendamentoForm(false)}>Fechar</button>
          </div>
        )}
        <div className="filtro-horario">
          <label>
            Horário Inicial:
            <input
              type="time"
              value={horaInicial}
              onChange={(e) => setHoraInicial(e.target.value)}
            />
          </label>
          <label>
            Horário Final:
            <input
              type="time"
              value={horaFinal}
              onChange={(e) => setHoraFinal(e.target.value)}
            />
          </label>
        </div>
        <div
          className="profissional-item"
          style={{ backgroundColor: '#000' }}
          onClick={() => filtrarPorProfissional('')}
        >
          Todos os Profissionais
        </div>
        {profissionais.map(prof => (
          <div
            key={prof.id}
            className="profissional-item"
            style={{ backgroundColor: prof.cor }}
            onClick={() => filtrarPorProfissional(prof.id)}
          >
            {prof.nome}
          </div>
        ))}
      </div>
      
      <div className="calendar-wrapper">        
        <FullCalendar
          plugins={[dayGridPlugin, timeGridPlugin, interactionPlugin]}
          initialView="timeGridWeek"
          headerToolbar={{
            left: 'prev,next today',
            center: 'title',
            right: 'dayGridMonth,timeGridWeek,timeGridDay'
          }}
          locale={ptBrLocale}
          events={[...eventos, currentTimeEvent].filter(event => event !== null)}
          selectable={true}
          selectMirror={true}
          dayMaxEvents={true}
          weekends={true}
          select={handleDateSelect}
          eventClick={handleEventClick}
          eventDrop={handleEventDrop}
          height="auto"
          contentHeight="auto"
          stickyHeaderDates={true}
          slotMinTime={horaInicial}
          slotMaxTime={horaFinal}
          nowIndicator={true}
        />
      </div>
      {showEventoModal && (
        <div className="evento-modal">
            <h2>Detalhes do Agendamento</h2>
            <p><strong>Cliente:</strong> {eventoSelecionado.cliente}</p>
            <p><strong>Serviço:</strong> {eventoSelecionado.servico}</p>
            <p><strong>Profissional:</strong> {eventoSelecionado.profissional}</p>
            <p><strong>Início:</strong> {eventoSelecionado.dataInicio}</p>
            <p><strong>Fim:</strong> {eventoSelecionado.dataFim}</p>
            <button onClick={handleCloseEventoModal} className='fechar-button'>Fechar</button>
            <button onClick={handleCancelarAgendamento} className="cancelar-button">Cancelar Agendamento</button>
            {showConfirmacaoCancelamento && (
              <div className="confirmacao-cancelamento">
                <p>Deseja cancelar este agendamento?</p>
                <button onClick={confirmarCancelamento} className="cancelar-button">Sim</button>
                <button onClick={() => setShowConfirmacaoCancelamento(false)} className="cancelar-button">Não</button>
              </div>
            )}
        </div>
      )}
      <AgendamentoModal
                show={showAgendamentoModal}
                onClose={() => setShowAgendamentoModal(false)}
                selectedDate={selectedDate} // Passe selectedDate para o modal
      />
    </div>
  );
};

export default CalendarioAgendamento;
